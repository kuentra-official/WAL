wal에 대하여 정말 쉽게 설명하겠습니다.


wal은 복잡하지 않습니다. 단순히 효율적으로 파일을 저장하고
필요한 데이터만을 읽어내는 형식을 wal구조라고 볼 수 있습니다.



1. SegSerialID
2. BlockNumber
3. ChunkOffset
4. ChunkSize

위 4가지 원리만 이해하셔도 wal을 직접 구축할 수 있습니다.

흔히 접할 수 있는 MySQL의 구성원리로 생각하세요.


1. 먼저 세크먼트 파일 구조입니다. 이들은 여러개가 존재할 수 있으며,
상황에 따라서 병합될 수도 있습니다. 이들은 내부적으로 Block이라는 것을 가집니다.

-> 지금부터 세그먼트를 Shard Table이라고 생각하십시오.
-> 또한 Block은 단순히 많은 샤드 중 하나의 테이블이라고 생각하면 됩니다.

+-----------------------------------------------------+
| Segment File (SegmentID = 1)                        |
+-----------------------------------------------------+
| Block 0               | Block 1               | ... |
+-----------------------+-----------------------+-----+

2. 블록 내 청크 개념
블록은 하나 이상의 청크로 구성됩니다. 즉, 테이블이 하나 이상의 row를 가지고 있는다고 생각하면 됩니다.

+-----------------------+
| Block 0               |
+-----------------------+
| Chunk 0 | Chunk 1 | ...|
+---------+---------+----+

각 청크는 chunkoffset과 chunksize로 구분되는데, 
이 부분을 하나의 row로 보는게 아닌 limit와 offset으로 봐야합니다.
완전히 MySQL과 개념이 호환된다고 생각하면 안됩니다.

+-----------------------+
| Block 0               |
+-----------------------+
| C0      | C1      | C2 |
+---------+---------+----+
| Offset 0| Offset X| ...|
+---------+---------+----+
| Size Y  | Size Z  | ...|
+---------+---------+----+

이 개념을 각 샤드 테이블엔 수많은 문서를 쪼개서 넣은거라고 생각하십시오.
그럼 청크의 개념이 잘 보입니다.

chunkoffset(찾으려는 문서의 시작위치), chunksize(찾으려는 문서의 마지막페이지 수)
즉 문서가 0에서 시작하고 100페이지면 
SELECT * FROM SHARD_TABLE1 WHERE BLOCK_ID=0 OFFSET 0 LIMIT 1
위와 같은 개념에 도달합니다.

반대로 쓸 때도 마찬가지입니다.
+-----------------------+
| Block 0               |
+-----------------------+
| C0      | C1      | C2 |
+---------+---------+----+
| Data    | Data    | Data|
+---------+---------+----+

어떠한 샤드테이블(SegSerialID)에 넣을지, 어느 위치인지, 어느 길이인지 
이를 알고 wal은 데이터를 처리하기에
빠르게 데이터를 찾고, 안정적으로 관리할 수 있는 용이성을 가집니다.